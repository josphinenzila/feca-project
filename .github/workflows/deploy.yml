name: Deploy to cPanel
on:
  push:
    branches: [main, master]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Laravel .env
        working-directory: ./api
        run: |
          cat > .env << EOF
          APP_NAME=${{ secrets.LARAVEL_APP_NAME }}
          APP_ENV=production
          APP_KEY=${{ secrets.LARAVEL_APP_KEY }}
          APP_DEBUG=false
          APP_URL=https://feca4development.org/backend

          # Database Configuration
          DB_CONNECTION=mysql
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          # Session Configuration (disabled for API)
          SESSION_DRIVER=array
          SESSION_LIFETIME=120
          SESSION_ENCRYPT=false

          # Cache Configuration
          CACHE_DRIVER=database
          QUEUE_CONNECTION=sync

          # JWT Configuration
          JWT_PUBLIC_KEY="${{ secrets.JWT_PUBLIC_KEY }}"
          JWT_PRIVATE_KEY="${{ secrets.JWT_PRIVATE_KEY }}"

          # Admin Configuration
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          EOF

      - name: Create root .htaccess for security
        run: |
          cat > .htaccess << EOF
          # Prevent directory browsing
          Options -Indexes

          # Hide backend directory from direct access
          <DirectoryMatch "backend">
              Require all denied
          </DirectoryMatch>

          # Deny access to sensitive files and directories
          <FilesMatch "\.(env|git|gitignore|gitattributes)$">
              Require all denied
          </FilesMatch>

          <DirectoryMatch "\.git">
              Require all denied
          </DirectoryMatch>

          # Block access to composer files
          <FilesMatch "(composer\.(json|lock)|package\.(json|lock))$">
              Require all denied
          </FilesMatch>

          # Block access to log files
          <FilesMatch "\.log$">
              Require all denied
          </FilesMatch>
          EOF

      - name: Create API .htaccess for Laravel routing
        run: |
          cat > api_htaccess << EOF
          # Laravel API routing
          <IfModule mod_rewrite.c>
              RewriteEngine On
              
              # Handle Authorization Header for API authentication
              RewriteCond %{HTTP:Authorization} .
              RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
              
              # Handle preflight OPTIONS requests for CORS
              RewriteCond %{REQUEST_METHOD} OPTIONS
              RewriteRule ^(.*)$ $1 [R=200,L]
              
              # Redirect Trailing Slashes If Not A Folder...
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteCond %{REQUEST_URI} (.+)/$
              RewriteRule ^ %1 [L,R=301]
              
              # Send Requests To Front Controller...
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteCond %{REQUEST_FILENAME} !-f
              RewriteRule ^ index.php [L]
          </IfModule>

          # CORS and API headers
          <IfModule mod_headers.c>
              # CORS headers for API
              Header always set Access-Control-Allow-Origin "*"
              Header always set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH"
              Header always set Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, X-CSRF-TOKEN"
              Header always set Access-Control-Max-Age "3600"
              
              # Security headers
              Header always set X-Content-Type-Options nosniff
              Header always set X-Frame-Options SAMEORIGIN
              Header always set X-XSS-Protection "1; mode=block"
              Header always set Referrer-Policy "strict-origin-when-cross-origin"
              
              # API response headers
              Header always set Content-Type "application/json; charset=utf-8" "expr=%{CONTENT_TYPE} =~ m#^application/json#"
          </IfModule>

          # Prevent directory browsing
          Options -Indexes

          # Deny access to sensitive files
          <FilesMatch "\.(env|git|gitignore|gitattributes|log)$">
              Require all denied
          </FilesMatch>

          <DirectoryMatch "\.git">
              Require all denied
          </DirectoryMatch>

          # Deny access to storage and bootstrap/cache directories from web
          RedirectMatch 403 ^/backend/laravel/.*$
          RedirectMatch 403 ^/storage/.*$
          RedirectMatch 403 ^/bootstrap/cache/.*$
          EOF

      - name: Create deployment package
        run: |
          mkdir deploy

          # Copy Laravel application files to laravel subdirectory (excluding public folder)
          rsync -av \
            --exclude=vendor \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=.gitignore \
            --exclude=.gitattributes \
            --exclude=storage/logs/* \
            --exclude=bootstrap/cache/* \
            --exclude=public \
            ./api/ deploy/laravel/

          # Copy Laravel's public folder contents to document root for API serving
          cp -r ./api/public/* deploy/

          # Update index.php to point to correct Laravel path
          sed -i "s|__DIR__.'/../|__DIR__.'/laravel/|g" deploy/index.php

          # Create a simple API info endpoint at root
          cat > deploy/info.php << 'INFO_EOF'
          <?php
          header('Content-Type: application/json');
          echo json_encode([
              'api' => 'Laravel API Server',
              'status' => 'active',
              'version' => '1.0',
              'endpoints' => [
                  'base_url' => 'https://feca4development.org/backend',
                  'api_routes' => 'Check /api/* endpoints'
              ]
          ]);
          INFO_EOF

          # Move the API .htaccess to the deploy directory (document root)
          mv api_htaccess deploy/.htaccess

      - name: Deploy via SFTP
        run: |
          sshpass -p "${{ secrets.CPANEL_PASSWORD }}" sftp -o StrictHostKeyChecking=no -P ${{ secrets.CPANEL_PORT }} ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }} <<EOF
          cd public_html

          # Remove old directories (both api and backend for clean deployment)
          rm -rf api backend

          # Upload new files to backend directory
          lcd deploy
          mkdir backend
          put -r * backend/

          # Move root htaccess to document root for additional security
          get backend/root.htaccess .htaccess 2>/dev/null || true
          rm backend/root.htaccess 2>/dev/null || true

          quit
          EOF

      - name: Setup Laravel on server via SSH
        run: |
          sshpass -p "${{ secrets.CPANEL_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p ${{ secrets.CPANEL_PORT }} ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }} << 'ENDSSH'
          cd public_html/backend/laravel

          # Install composer dependencies
          composer install --no-dev --optimize-autoloader --no-interaction

          # Set proper permissions
          chmod -R 755 storage bootstrap/cache
          chmod -R 775 storage/logs storage/framework

          # Create cache table if using database cache
          echo "Setting up cache table..."
          php artisan cache:table 2>/dev/null || echo "Cache table may already exist"

          # Clear and cache configurations
          php artisan config:clear
          php artisan cache:clear
          php artisan config:cache
          php artisan route:cache || echo "Route caching skipped"
          php artisan view:cache || echo "View caching skipped"

          # Create storage link (points to correct location)
          cd ../
          php laravel/artisan storage:link || true

          echo "Laravel deployment completed successfully"
          ENDSSH
