name: Deploy to cPanel

on:
  push:
    branches: [main, master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, gd

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Install Laravel dependencies
        working-directory: ./api
        run: composer install --optimize-autoloader --no-dev

      - name: Create Laravel .env
        working-directory: ./api
        run: |
          cat > .env << EOF
          APP_NAME=${{ secrets.LARAVEL_APP_NAME }}
          APP_ENV=production  
          APP_KEY=${{ secrets.LARAVEL_APP_KEY }}
          APP_DEBUG=false
          APP_URL=https://feca4development.org
          DB_CONNECTION=mysql
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          EOF

      - name: Optimize Laravel
        working-directory: ./api
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      - name: Install Next.js dependencies
        working-directory: ./client
        run: npm ci

      - name: Create Next.js .env
        working-directory: ./client
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_APP_ENV=production
          NEXT_PUBLIC_BACKEND_URL=https://feca4development.org/api
          NEXT_PUBLIC_DOMAIN_URL=https://feca4development.org
          EOF

      - name: Build Next.js
        working-directory: ./client
        run: |
          npm run build
          npx next export || echo "Static export not available"

      - name: Create simple test files
        run: |
          mkdir -p deploy
          echo "<h1>GitHub Actions Deploy Test</h1><p>Deployed at: $(date)</p>" > deploy/test.html
          echo "GitHub Actions Deploy Test - $(date)" > deploy/test.txt

      - name: Create deployment package
        run: |
          # Copy Laravel API
          rsync -av --exclude='node_modules' --exclude='.git' --exclude='tests' ./api/ deploy/api/

          # Copy Next.js files to root
          if [ -d "./client/out" ]; then
            echo "Using static export"
            cp -r ./client/out/* deploy/
          elif [ -d "./client/.next" ]; then
            echo "Using build output"
            cp -r ./client/.next deploy/
            cp -r ./client/public/* deploy/
          fi

          echo "=== Files ready for upload ==="
          ls -la deploy/
          echo "=== Total files to upload ==="
          find deploy -type f | wc -l

      - name: Test SFTP connection first
        run: |
          echo "Testing SFTP connection..."
          sshpass -p "${{ secrets.CPANEL_PASSWORD }}" sftp -o StrictHostKeyChecking=no -P ${{ secrets.CPANEL_PORT }} ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }} <<EOF
          pwd
          ls -la
          quit
          EOF

      - name: Upload test files via SFTP
        run: |
          echo "Uploading test files..."
          sshpass -p "${{ secrets.CPANEL_PASSWORD }}" sftp -o StrictHostKeyChecking=no -P ${{ secrets.CPANEL_PORT }} ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }} <<EOF
          cd /public_html
          put deploy/test.html
          put deploy/test.txt
          ls -la
          quit
          EOF

      - name: Upload all files via rsync over SSH
        run: |
          echo "Uploading all files via rsync..."
          sshpass -p "${{ secrets.CPANEL_PASSWORD }}" rsync -avz -e "ssh -o StrictHostKeyChecking=no -p ${{ secrets.CPANEL_PORT }}" deploy/ ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }}:/public_html/

      - name: Verify upload via SFTP
        run: |
          echo "Verifying upload..."
          sshpass -p "${{ secrets.CPANEL_PASSWORD }}" sftp -o StrictHostKeyChecking=no -P ${{ secrets.CPANEL_PORT }} ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }} <<EOF
          cd /public_html
          ls -la
          quit
          EOF
